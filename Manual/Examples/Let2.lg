%if False

> module Let2 where
> import Lexer
> import Result
>
> data Expr                     =  Const Int | Var String | Bin Expr Op Expr | Let Decl Expr
>                                  deriving (Show)
>
> data Decl                     =  String :=: Expr
>                                  deriving (Show)
>
> %{
>
> Terminal                      =  Numeral {Int}
>                               |  Ident {String}
>                               |  Addop {Op}
>                               |  Mulop {Op}
>                               |  KWLet   as "let"
>                               |  KWIn    as "in"
>                               |  Equal   as "="
>                               |  LParen  as "("
>                               |  RParen  as ")";

%endif

> left     6 Addop {};
> left     7 Mulop {};
> nonassoc 0 "in";

%if False

> expr  {Expr};
> expr  {Const n}               :  Numeral {n};
>       {Var s}                 |  Ident {s};
>       {Bin e1 op e2}          |  expr {e1}, Addop {op}, expr {e2};
>       {Bin e1 op e2}          |  expr {e1}, Mulop {op}, expr {e2};
>       {Let d e}               |  "let", decl {d}, "in", expr {e};
>       {e}                     |  "(", expr {e}, ")";
>
> decl  {Decl};
> decl  {s :=: e}               :  Ident {s}, "=", expr {e};
>
> }%
>
> frown _                       =  fail "syntax error"

%endif